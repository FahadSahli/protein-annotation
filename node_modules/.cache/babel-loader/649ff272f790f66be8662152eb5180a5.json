{"ast":null,"code":"import { isArrayBuffer } from \"@aws-sdk/is-array-buffer\";\nimport { Buffer } from \"buffer\";\nexport function fromArrayBuffer(input, offset, length) {\n  if (offset === void 0) {\n    offset = 0;\n  }\n\n  if (length === void 0) {\n    length = input.byteLength - offset;\n  }\n\n  if (!isArrayBuffer(input)) {\n    throw new Error(\"argument passed to fromArrayBuffer was not an ArrayBuffer\");\n  }\n\n  if (typeof Buffer.from === \"function\" && Buffer.from !== Uint8Array.from) {\n    return Buffer.from(input, offset, length);\n  } // Any version of node that supports the optional offset and length\n  // parameters, which were added in Node 6.0.0, will support Buffer.from and\n  // have already returned. Throw if offset is not 0 or if length differs from\n  // the underlying buffer's length.\n\n\n  if (offset !== 0 || length !== input.byteLength) {\n    throw new Error(\"Unable to convert TypedArray to Buffer in Node \" + process.version);\n  }\n\n  return new Buffer(input);\n}\nexport function fromString(input, encoding) {\n  if (typeof input !== \"string\") {\n    throw new Error(\"argument passed to fromString was not a string\");\n  }\n\n  if (typeof Buffer.from === \"function\" && Buffer.from !== Uint8Array.from) {\n    return Buffer.from(input, encoding);\n  }\n\n  return new Buffer(input, encoding);\n}","map":{"version":3,"sources":["index.ts"],"names":[],"mappings":"AAAA,SAAS,aAAT,QAA8B,0BAA9B;AACA,SAAS,MAAT,QAAuB,QAAvB;AAEA,OAAM,SAAU,eAAV,CAA0B,KAA1B,EAA8C,MAA9C,EAA0D,MAA1D,EAAoG;AAAtD,MAAA,MAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,MAAA,GAAA,CAAA;AAAU;;AAAE,MAAA,MAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,MAAA,GAAiB,KAAK,CAAC,UAAN,GAAmB,MAApC;AAA0C;;AACxG,MAAI,CAAC,aAAa,CAAC,KAAD,CAAlB,EAA2B;AACzB,UAAM,IAAI,KAAJ,CAAU,2DAAV,CAAN;AACD;;AAED,MAAI,OAAO,MAAM,CAAC,IAAd,KAAuB,UAAvB,IAAqC,MAAM,CAAC,IAAP,KAAgB,UAAU,CAAC,IAApE,EAA0E;AACxE,WAAO,MAAM,CAAC,IAAP,CAAY,KAAZ,EAAmB,MAAnB,EAA2B,MAA3B,CAAP;AACD,GAPuG,CASxG;AACA;AACA;AACA;;;AACA,MAAI,MAAM,KAAK,CAAX,IAAgB,MAAM,KAAK,KAAK,CAAC,UAArC,EAAiD;AAC/C,UAAM,IAAI,KAAJ,CAAU,oDAAkD,OAAO,CAAC,OAApE,CAAN;AACD;;AACD,SAAO,IAAI,MAAJ,CAAW,KAAX,CAAP;AACD;AAED,OAAM,SAAU,UAAV,CAAqB,KAArB,EAAoC,QAApC,EAA6D;AACjE,MAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;AAC7B,UAAM,IAAI,KAAJ,CAAU,gDAAV,CAAN;AACD;;AAED,MAAI,OAAO,MAAM,CAAC,IAAd,KAAuB,UAAvB,IAAqC,MAAM,CAAC,IAAP,KAAgB,UAAU,CAAC,IAApE,EAA0E;AACxE,WAAO,MAAM,CAAC,IAAP,CAAY,KAAZ,EAAmB,QAAnB,CAAP;AACD;;AAED,SAAO,IAAI,MAAJ,CAAW,KAAX,EAAkB,QAAlB,CAAP;AACD","sourcesContent":["import { isArrayBuffer } from \"@aws-sdk/is-array-buffer\";\nimport { Buffer } from \"buffer\";\n\nexport function fromArrayBuffer(input: ArrayBuffer, offset = 0, length: number = input.byteLength - offset): Buffer {\n  if (!isArrayBuffer(input)) {\n    throw new Error(\"argument passed to fromArrayBuffer was not an ArrayBuffer\");\n  }\n\n  if (typeof Buffer.from === \"function\" && Buffer.from !== Uint8Array.from) {\n    return Buffer.from(input, offset, length);\n  }\n\n  // Any version of node that supports the optional offset and length\n  // parameters, which were added in Node 6.0.0, will support Buffer.from and\n  // have already returned. Throw if offset is not 0 or if length differs from\n  // the underlying buffer's length.\n  if (offset !== 0 || length !== input.byteLength) {\n    throw new Error(`Unable to convert TypedArray to Buffer in Node ${process.version}`);\n  }\n  return new Buffer(input);\n}\nexport type StringEncoding = \"ascii\" | \"utf8\" | \"utf16le\" | \"ucs2\" | \"base64\" | \"latin1\" | \"binary\" | \"hex\";\nexport function fromString(input: string, encoding?: StringEncoding): Buffer {\n  if (typeof input !== \"string\") {\n    throw new Error(\"argument passed to fromString was not a string\");\n  }\n\n  if (typeof Buffer.from === \"function\" && Buffer.from !== Uint8Array.from) {\n    return Buffer.from(input, encoding as any);\n  }\n\n  return new Buffer(input, encoding as any);\n}\n"],"sourceRoot":"./src/"},"metadata":{},"sourceType":"module"}