{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/ec2-user/environment/web-tier-repository/src/components/Predictions.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { API, graphqlOperation } from 'aws-amplify';\nimport { listProteinAnnotationTables } from './graphql/queries';\nimport './styles.css'; //const initialState  = { name: '', description: '' }\n\nfunction Predictions(props) {\n  _s();\n\n  //const [formState, setFormState] = useState(initialState)\n  const [predictions, setPredictions] = useState([]);\n  const currentUserID = props[\"userID\"];\n  this.showTable = false;\n  useEffect(() => {\n    fetchPredictions(); //setTimeout(window.location.reload(), 60000);\n    //window.setTimeout(function(){window.location.reload(false)}, 3000);\n  }, []);\n\n  async function fetchPredictions() {\n    try {\n      const todoData = await API.graphql(graphqlOperation(listProteinAnnotationTables));\n      const predictions = todoData.data.listProteinAnnotationTables.items;\n      this.showTable = true;\n      console.log(\"Predictions...\", predictions);\n      console.log(\"lenfth...\", predictions.length);\n      console.log(\"userID...\", currentUserID);\n      setPredictions(predictions);\n    } catch (err) {\n      console.log('error fetching predictions');\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: showTable && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: 30\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Predictions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        class: \"table\",\n        children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Family Accession\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Family ID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Confidence\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Input Sequence\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this), predictions.map((elm, i) => {\n          return currentUserID === elm.userID ? /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: elm.familyAccession\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: elm.familyID\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: elm.confidence\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              class: \"limit-length\",\n              children: elm.inputSequence\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(\"h1\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 17\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 21\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Predictions, \"zH5rPFTlWYOw2PPwe/kdtH2YoqI=\");\n\n_c = Predictions;\nexport default Predictions;\n\nvar _c;\n\n$RefreshReg$(_c, \"Predictions\");","map":{"version":3,"sources":["/home/ec2-user/environment/web-tier-repository/src/components/Predictions.js"],"names":["useState","useEffect","API","graphqlOperation","listProteinAnnotationTables","Predictions","props","predictions","setPredictions","currentUserID","showTable","fetchPredictions","todoData","graphql","data","items","console","log","length","err","marginBottom","map","elm","i","userID","familyAccession","familyID","confidence","inputSequence"],"mappings":";;;;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,GAAT,EAAcC,gBAAd,QAAuC,aAAvC;AACA,SAASC,2BAAT,QAA4C,mBAA5C;AACA,OAAO,cAAP,C,CAEA;;AAEA,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AAAA;;AAE1B;AACA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCR,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAMS,aAAa,GAAGH,KAAK,CAAC,QAAD,CAA3B;AACA,OAAKI,SAAL,GAAiB,KAAjB;AAGAT,EAAAA,SAAS,CAAC,MAAM;AACdU,IAAAA,gBAAgB,GADF,CAEd;AACA;AACD,GAJQ,EAIN,EAJM,CAAT;;AAMA,iBAAeA,gBAAf,GAAkC;AAChC,QAAI;AACF,YAAMC,QAAQ,GAAG,MAAMV,GAAG,CAACW,OAAJ,CAAYV,gBAAgB,CAACC,2BAAD,CAA5B,CAAvB;AACA,YAAMG,WAAW,GAAGK,QAAQ,CAACE,IAAT,CAAcV,2BAAd,CAA0CW,KAA9D;AACA,WAAKL,SAAL,GAAiB,IAAjB;AAEAM,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BV,WAA9B;AACAS,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBV,WAAW,CAACW,MAArC;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAA0BR,aAA1B;AAEAD,MAAAA,cAAc,CAACD,WAAD,CAAd;AACD,KAVD,CAUE,OAAOY,GAAP,EAAY;AAAEH,MAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AAA2C;AAC5D;;AAED,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,cACGP,SAAS,iBAAI;AAAK,MAAA,KAAK,EAAE;AAACU,QAAAA,YAAY,EAAE;AAAf,OAAZ;AAAA,8BACZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADY,eAEZ;AAAO,QAAA,KAAK,EAAC,OAAb;AAAA,gCACE;AAAA,kCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAQIb,WAAW,CAACc,GAAZ,CAAgB,CAACC,GAAD,EAAMC,CAAN,KAAY;AAC1B,iBAAOd,aAAa,KAAKa,GAAG,CAACE,MAAtB,gBACL;AAAA,oCACE;AAAA,wBAAKF,GAAG,CAACG;AAAT;AAAA;AAAA;AAAA;AAAA,oBADF,eAEE;AAAA,wBAAKH,GAAG,CAACI;AAAT;AAAA;AAAA;AAAA;AAAA,oBAFF,eAGE;AAAA,wBAAKJ,GAAG,CAACK;AAAT;AAAA;AAAA;AAAA;AAAA,oBAHF,eAIE;AAAI,cAAA,KAAK,EAAC,cAAV;AAAA,wBAA0BL,GAAG,CAACM;AAA9B;AAAA;AAAA;AAAA;AAAA,oBAJF;AAAA;AAAA;AAAA;AAAA;AAAA,kBADK,gBAQL;AAAA;AAAA;AAAA;AAAA,kBARF;AASG,SAVL,CARJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAFY;AAAA;AAAA;AAAA;AAAA;AAAA;AADhB;AAAA;AAAA;AAAA;AAAA,UADF;AA6BD;;GAzDQvB,W;;KAAAA,W;AA2DT,eAAeA,WAAf","sourcesContent":["import { useState, useEffect } from 'react';\nimport { API, graphqlOperation  } from 'aws-amplify';\nimport { listProteinAnnotationTables } from './graphql/queries';\nimport './styles.css';\n\n//const initialState  = { name: '', description: '' }\n\nfunction Predictions(props) {\n  \n  //const [formState, setFormState] = useState(initialState)\n  const [predictions, setPredictions] = useState([]);\n  const currentUserID = props[\"userID\"];\n  this.showTable = false;\n  \n  \n  useEffect(() => {\n    fetchPredictions();\n    //setTimeout(window.location.reload(), 60000);\n    //window.setTimeout(function(){window.location.reload(false)}, 3000);\n  }, []);\n\n  async function fetchPredictions() {\n    try {\n      const todoData = await API.graphql(graphqlOperation(listProteinAnnotationTables));\n      const predictions = todoData.data.listProteinAnnotationTables.items;\n      this.showTable = true;\n      \n      console.log(\"Predictions...\", predictions);\n      console.log(\"lenfth...\", predictions.length);\n      console.log(\"userID...\",  currentUserID);\n      \n      setPredictions(predictions);\n    } catch (err) { console.log('error fetching predictions') }\n  }\n\n  return (\n    <div className=\"App\">\n      {showTable && <div style={{marginBottom: 30}}>\n        <h1>Predictions</h1>\n        <table class=\"table\">\n          <tr>\n            <th>Family Accession</th>\n            <th>Family ID</th>\n            <th>Confidence</th>\n            <th>Input Sequence</th>\n          </tr>\n          {\n            predictions.map((elm, i) => {\n              return currentUserID === elm.userID ?\n                <tr>\n                  <td>{elm.familyAccession}</td>\n                  <td>{elm.familyID}</td>\n                  <td>{elm.confidence}</td>\n                  <td class=\"limit-length\">{elm.inputSequence}</td>\n                </tr>\n                :\n                <h1></h1>;\n                }\n              )\n            }\n        </table>\n      </div> }\n    </div>\n  );\n}\n\nexport default Predictions;"]},"metadata":{},"sourceType":"module"}