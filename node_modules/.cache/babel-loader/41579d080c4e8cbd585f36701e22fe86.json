{"ast":null,"code":"import { __awaiter, __generator, __rest } from \"tslib\";\nexport var loggerMiddleware = function () {\n  return function (next, context) {\n    return function (args) {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var logger, inputFilterSensitiveLog, outputFilterSensitiveLog, response, _a, $metadata, outputWithoutMetadata;\n\n        return __generator(this, function (_b) {\n          switch (_b.label) {\n            case 0:\n              logger = context.logger, inputFilterSensitiveLog = context.inputFilterSensitiveLog, outputFilterSensitiveLog = context.outputFilterSensitiveLog;\n              return [4\n              /*yield*/\n              , next(args)];\n\n            case 1:\n              response = _b.sent();\n\n              if (!logger) {\n                return [2\n                /*return*/\n                , response];\n              }\n\n              _a = response.output, $metadata = _a.$metadata, outputWithoutMetadata = __rest(_a, [\"$metadata\"]);\n\n              if (typeof logger.debug === \"function\") {\n                logger.debug({\n                  httpRequest: args.request\n                });\n                logger.debug({\n                  httpResponse: response.response\n                });\n              }\n\n              if (typeof logger.info === \"function\") {\n                logger.info({\n                  $metadata: $metadata,\n                  input: inputFilterSensitiveLog(args.input),\n                  output: outputFilterSensitiveLog(outputWithoutMetadata)\n                });\n              }\n\n              return [2\n              /*return*/\n              , response];\n          }\n        });\n      });\n    };\n  };\n};\nexport var loggerMiddlewareOptions = {\n  name: \"loggerMiddleware\",\n  tags: [\"LOGGER\"],\n  step: \"finalizeRequest\"\n}; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\nexport var getLoggerPlugin = function (options) {\n  return {\n    applyToStack: function (clientStack) {\n      clientStack.add(loggerMiddleware(), loggerMiddlewareOptions);\n    }\n  };\n};","map":{"version":3,"sources":["../../src/loggerMiddleware.ts"],"names":[],"mappings":";AAaA,OAAO,IAAM,gBAAgB,GAAG,YAAA;AAAM,SAAA,UACpC,IADoC,EAEpC,OAFoC,EAEJ;AACC,WAAA,UACjC,IADiC,EACE;AAAA,aAAA,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;;;AAE3B,cAAA,MAAM,GAAwD,OAAO,CAA/D,MAAN,EAAQ,uBAAuB,GAA+B,OAAO,CAAtC,uBAA/B,EAAiC,wBAAwB,GAAK,OAAO,CAAZ,wBAAzD;AAES,qBAAA,CAAA;AAAA;AAAA,gBAAM,IAAI,CAAC,IAAD,CAAV,CAAA;;;AAAX,cAAA,QAAQ,GAAG,EAAA,CAAA,IAAA,EAAX;;AAEN,kBAAI,CAAC,MAAL,EAAa;AACX,uBAAA,CAAA;AAAA;AAAA,kBAAO,QAAP,CAAA;AACD;;AAGC,cAAA,EAAA,GACE,QAAQ,CADqC,MAA/C,EAAU,SAAS,GAAA,EAAA,CAAA,SAAnB,EAAwB,qBAAqB,GAAA,MAAA,CAAA,EAAA,EAArC,CAAA,WAAA,CAAqC,CAA7C;;AAGF,kBAAI,OAAO,MAAM,CAAC,KAAd,KAAwB,UAA5B,EAAwC;AACtC,gBAAA,MAAM,CAAC,KAAP,CAAa;AACX,kBAAA,WAAW,EAAE,IAAI,CAAC;AADP,iBAAb;AAGA,gBAAA,MAAM,CAAC,KAAP,CAAa;AACX,kBAAA,YAAY,EAAE,QAAQ,CAAC;AADZ,iBAAb;AAGD;;AAED,kBAAI,OAAO,MAAM,CAAC,IAAd,KAAuB,UAA3B,EAAuC;AACrC,gBAAA,MAAM,CAAC,IAAP,CAAY;AACV,kBAAA,SAAS,EAAA,SADC;AAEV,kBAAA,KAAK,EAAE,uBAAuB,CAAC,IAAI,CAAC,KAAN,CAFpB;AAGV,kBAAA,MAAM,EAAE,wBAAwB,CAAC,qBAAD;AAHtB,iBAAZ;AAKD;;AAED,qBAAA,CAAA;AAAA;AAAA,gBAAO,QAAP,CAAA;;;OA/BmC,CAAA;AADF,KAAA;AAHG,GAAA;AAoCrC,CApCM;AAsCP,OAAO,IAAM,uBAAuB,GAAqD;AACvF,EAAA,IAAI,EAAE,kBADiF;AAEvF,EAAA,IAAI,EAAE,CAAC,QAAD,CAFiF;AAGvF,EAAA,IAAI,EAAE;AAHiF,CAAlF,C,CAMP;;AACA,OAAO,IAAM,eAAe,GAAG,UAAC,OAAD,EAA8B;AAA0B,SAAC;AACtF,IAAA,YAAY,EAAE,UAAC,WAAD,EAAY;AACxB,MAAA,WAAW,CAAC,GAAZ,CAAgB,gBAAgB,EAAhC,EAAoC,uBAApC;AACD;AAHqF,GAAD;AAIrF,CAJK","sourcesContent":["import {\n  AbsoluteLocation,\n  FinalizeHandler,\n  FinalizeHandlerArguments,\n  FinalizeHandlerOutput,\n  FinalizeRequestHandlerOptions,\n  HandlerExecutionContext,\n  MetadataBearer,\n  Pluggable,\n} from \"@aws-sdk/types\";\n\nimport { LoggerResolvedConfig } from \"./configurations\";\n\nexport const loggerMiddleware = () => <Output extends MetadataBearer = MetadataBearer>(\n  next: FinalizeHandler<any, Output>,\n  context: HandlerExecutionContext\n): FinalizeHandler<any, Output> => async (\n  args: FinalizeHandlerArguments<any>\n): Promise<FinalizeHandlerOutput<Output>> => {\n  const { logger, inputFilterSensitiveLog, outputFilterSensitiveLog } = context;\n\n  const response = await next(args);\n\n  if (!logger) {\n    return response;\n  }\n\n  const {\n    output: { $metadata, ...outputWithoutMetadata },\n  } = response;\n\n  if (typeof logger.debug === \"function\") {\n    logger.debug({\n      httpRequest: args.request,\n    });\n    logger.debug({\n      httpResponse: response.response,\n    });\n  }\n\n  if (typeof logger.info === \"function\") {\n    logger.info({\n      $metadata,\n      input: inputFilterSensitiveLog(args.input),\n      output: outputFilterSensitiveLog(outputWithoutMetadata),\n    });\n  }\n\n  return response;\n};\n\nexport const loggerMiddlewareOptions: FinalizeRequestHandlerOptions & AbsoluteLocation = {\n  name: \"loggerMiddleware\",\n  tags: [\"LOGGER\"],\n  step: \"finalizeRequest\",\n};\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport const getLoggerPlugin = (options: LoggerResolvedConfig): Pluggable<any, any> => ({\n  applyToStack: (clientStack) => {\n    clientStack.add(loggerMiddleware(), loggerMiddlewareOptions);\n  },\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}